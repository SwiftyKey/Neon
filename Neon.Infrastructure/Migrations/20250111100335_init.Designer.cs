// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neon.Infrastructure;

#nullable disable

namespace Neon.Infrastructure.Migrations
{
    [DbContext(typeof(NeonDbContext))]
    [Migration("20250111100335_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Neon.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 258, DateTimeKind.Unspecified).AddTicks(2702), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Компьютеры",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(951), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1283), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Ноутбуки",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1289), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1291), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Сканеры",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1292), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1294), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Принтеры",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1295), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1297), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Плоттеры",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1298), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1299), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "Микрокомпьютреы",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 260, DateTimeKind.Unspecified).AddTicks(1300), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(542), new TimeSpan(0, 5, 0, 0, 0)),
                            Date = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(553), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(583), new TimeSpan(0, 5, 0, 0, 0)),
                            Date = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 11,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(584), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(587), new TimeSpan(0, 5, 0, 0, 0)),
                            Date = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(588), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(589), new TimeSpan(0, 5, 0, 0, 0)),
                            Date = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(590), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(591), new TimeSpan(0, 5, 0, 0, 0)),
                            Date = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 12,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 272, DateTimeKind.Unspecified).AddTicks(592), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2391), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "Apple",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2401), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2403), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "Raspberry Pi Foundation",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2404), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2406), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "ASUS",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2407), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2408), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "MSI",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2409), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2410), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "Acer",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2411), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2413), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "HP",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2414), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2415), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "Canon",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2415), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2417), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "Xerox",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 261, DateTimeKind.Unspecified).AddTicks(2417), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(577), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "1638722046132620082",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(581), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(593), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "1638722046132620584",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(594), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(598), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "1638722046132620596",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(598), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(601), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "1638722046132620600",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(602), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(605), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "2638722046132620603",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(605), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(608), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "2638722046132620607",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(609), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(611), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "2638722046132620610",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(612), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(614), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "2638722046132620613",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(615), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(618), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "3638722046132620616",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(618), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(621), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "3638722046132620620",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(622), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(624), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "3638722046132620623",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(625), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(627), new TimeSpan(0, 5, 0, 0, 0)),
                            Title = "3638722046132620626",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 262, DateTimeKind.Unspecified).AddTicks(628), new TimeSpan(0, 5, 0, 0, 0)),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.OrderComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderCompositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4509), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 1,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4520), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4523), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 2,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4524), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4526), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 3,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4527), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4529), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 4,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4530), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            Count = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4531), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 5,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4532), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4534), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 6,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4535), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4536), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 7,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4537), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4539), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 8,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4540), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4541), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 9,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4542), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4544), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 10,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4545), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            Count = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4546), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 11,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4547), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            Count = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4549), new TimeSpan(0, 5, 0, 0, 0)),
                            OrderId = 12,
                            ProductId = 5,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 273, DateTimeKind.Unspecified).AddTicks(4550), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Cost = 162999.0,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1035), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Широкоформатный принтер HP DesignJet T630 24-in позволит работать с бумагой A1-формата при ширине печати, достигающей 24 дюйма. Оборудование для большого офиса действует по принципу термоструйной четырехцветной печати с разрешением 2400x1200 dpi. На печать одного листа A1 уходит всего 30 секунд – в цветном и черно-белом режиме. Прибор HP DesignJet T630 24-in оснащен USB-портом стандарта 2.0, Ethernet-интерфейсом и модулем Wi-Fi. Конструкция дополнена дисплеем, автоматическим резаком и лотком для материалов печати. Принтер поставляется вместе с комплектом картриджей, кабелем питания, шпинделем, печатающей головкой, подставкой и устройством для подачи листов в автоматическом режиме. Оборудование весит 28.9 кг и обладает размерами 101.3x93.2x60.5 см.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st4/fit/wm/0/0/5b265f525061f2adb15df59de124f8ac/24a623924dda6c2fd58ef2192c31067b716f5e7c867654a79c74e552aebc2373.jpg.webp",
                            ManufacturerId = 6,
                            Name = "HP DesignJet T630 24-in",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1044), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Cost = 105499.0,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1049), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Широкоформатный принтер HP DesignJet T230 используется для печати чертежей и презентационных материалов. Оборудование позволяет работать с бумагой A1-формата, обеспечивая печать шириной 24 дюйма. Вы можете использовать техническую, фотобумагу, пленку, документальную, с покрытием и самоклеящуюся бумагу. Модель HP DesignJet T230 работает по принципу термоструйной печати с применением чернил на основе пигментов и красителей. Оборудование оснащено модулем Wi-Fi, а также USB-портом, сетевым интерфейсом Ethernet. Устройство дополняется автоматическим резаком, а поставляется вместе с печатающей головкой, набором пробных струйных картриджей и кабелем питания.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/7c7a3dc904a797623685280a372fb643/6a347875fb179a3df40591835edb0d977b847988f86ae6c84a6a6af11018963f.jpg.webp",
                            ManufacturerId = 6,
                            Name = "HP DesignJet T230",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1050), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Cost = 9999.0,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1053), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Сканер Canon CanoScan LiDE 300 с компактной планшетной конструкцией обеспечивает высокое качество сканирования и удобство в эксплуатации. В устройстве установлены датчик CIS и светодиодный источник, который позволяет создавать четкие насыщенные отпечатки с разрешением до 2400x2400 dpi. Данная модель поддерживает различные документы форматом до А4. Из особенностей сканера отмечаются 4 кнопки управления и технология автоматического сканирования. Подключение и питание Canon CanoScan LiDE 300 осуществляется посредством интерфейсного разъема USB.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/1776a1ea7815e01a24a1dcb5d1cc318d/96bd12b7b97dc7ac1e4bb14414fa9a61dd765b5f5d9bbc6dca0861129adc7636.jpg.webp",
                            ManufacturerId = 7,
                            Name = "Canon CanoScan LiDE 300",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1054), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Cost = 34499.0,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1056), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Повысьте производительность профессионального сканирования с помощью быстрого, компактного и надежного сканера HP ScanJet Pro, предназначенного для сканирования до 1500 страниц в день. Автоматизируйте рабочие процессы с помощью ярлыков для вызова функций одной кнопкой и автоподатчика с поддержкой быстрого двустороннего сканирования.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/8cb9677f278668e95acaa9f3060d0731/b7740bdb64460420f4be4a6611675340ddc876008bd76033222ff927116bab31.jpg.webp",
                            ManufacturerId = 6,
                            Name = "HP Scanjet Pro 2600 f1",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1056), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Cost = 15899.0,
                            Count = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1059), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Принтер лазерный Xerox Phaser 3020 со светодиодной системой и разрешением 1200х1200 dpi обеспечивает четкость при печати черно-белых документов. Модель ориентирована на ежемесячную нагрузку до 15000 страниц. За 1 минуту устройство печатает 20 страниц формата А4. Подключение принтера Xerox Phaser 3020 к компьютеру выполняется по кабелю с разъемом USB. Для беспроводной синхронизации и обмена файлами реализован модуль Wi-Fi. Функция Apple AirPrint предусматривает печать из поддерживаемых приложений устройств Apple.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st4/fit/wm/0/0/3e2c97e07298a8f07c0dd75909a483f2/c0f3a5d99edd31c5ab9114cc65754aacfdac2dafc7a3cb235e1235b3759c2b04.jpg.webp",
                            ManufacturerId = 8,
                            Name = "Xerox Phaser 3020",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1059), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Cost = 13999.0,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1061), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Микрокомпьютер Raspberry Pi 4 Model B ориентирован на решение различных повседневных задач, не настаивающих на наличии внушительной вычислительной мощности. Благодаря процессору Broadcom BCM2711 вы сможете обрабатывать небольшие файлы, общаться с друзьями, а также использовать всевозможные приложения. В модели Raspberry Pi 4 Model B появился интерфейс Bluetooth, незаменимый для сопряжения с необходимыми устройствами. Быстрое подключение накопителей обеспечивается посредством предусмотренных в микрокомпьютере портов USB 3.0. Необходимое ПО пользователь выбирает в соответствии со своими предпочтениями.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st4/fit/wm/0/0/4665bd94590b11b0b725d72c98cf0538/eb92953343599336171855d1a57e9f70398acb880b4f86bc40b6e6c31c33df4d.jpg.webp",
                            ManufacturerId = 2,
                            Name = "Raspberry Pi 4 Model B",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1062), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 6,
                            Cost = 24999.0,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1064), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Микрокомпьютер Raspberry Pi 4 Model B 8GB представляет собой одноплатное компактное решение, которое при этом отличается высокой функциональностью и широкими возможностями использования. Данное устройство может выступать в качестве платформы для разработки программного обеспечения, эмулятора игровой приставки, а также медиа-центра и просто рабочей станции. В основе микрокомпьютера Raspberry Pi 4 Model B 8GB используется 4-ядерный процессор Broadcom BCM2711, работающий на частоте 1500 МГц, что вкупе с 8 ГБ оперативной памяти типа LPDDR4 может обеспечить комфортный уровень производительности для различных базовых задач. Для использования накопителей на плате предусмотрено множество интерфейсов периферии. Также есть полноформатные разъемы USB и HDMI 2.0, позволяющий выводить изображение в разрешении до 4K. Для доступа к сети модель поддерживает Wi-Fi и проводное подключение посредством Ethernet. Также для беспроводного соединения микрокомпьютер оснащен модулем Bluetooth. Устройство поставляется без операционной системы.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st4/fit/wm/0/0/5312c232092cb38edf5d5ac454dbef63/907f823cdaa4ed5db4aec3d027cd1afb6f7ca7ae8584a45dc28f58c160c51a83.jpg.webp",
                            ManufacturerId = 2,
                            Name = "Raspberry Pi 4 Model B 8GB",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1065), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Cost = 61799.0,
                            Count = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1067), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Мини ПК ASUS ExpertCenter PN52-S5149MD в корпусе-неттопе с размерами 130x120x58 мм предусматривает встроенный сетевой адаптер для проводного подключения к сети Интернет со скоростью обработки данных до 2.5 Гбит/с. Модель поддерживает вывод изображения на экраны нескольких мониторов благодаря присутствию на задней панели видеоразъемов HDMI (2 шт.) и USB Type-C. Для удобного подключения внешних накопителей данных на передней панели есть интерфейсы USB Type-A и USB Type-C. Мини ПК ASUS ExpertCenter PN52-S5149MD предусматривает твердотельный накопитель данных емкостью 256 ГБ для установки программ и хранения файлов, которые могут понадобиться в повседневной работе. 6-ядерный процессор AMD Ryzen 5 5600H и 8 ГБ оперативной памяти обеспечат достаточное быстродействие для запуска популярных офисных программ и решения нересурсоемких задач. На борту устройства отсутствует предустановленная операционная система.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/6d342c326b18387e6fc00490f91854e0/477330cfddac40388d3f9f9af02c613a90f2500c6b8213d128725fc09124832b.jpg.webp",
                            ManufacturerId = 3,
                            Name = "ASUS ExpertCenter PN52-S5149MD",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1067), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Cost = 79999.0,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1069), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Мини ПК Apple Mac mini может похвастаться миниатюрным корпусом с «серьезной» начинкой внутри. В основе его производительности – процессор Apple M2. Благодаря прогрессивной системе Neural Engine скорость машинного обучения возросла до 15 раз. ПК обеспечит недоступные ранее ресурсы для работы, игр и творчества – больше, чем вы могли себе представить. Процессор сочетается с оперативной памятью LPDDR5 объемом 8 ГБ и интегрированной видеокартой Apple M2 10-core. Твердотельного накопителя хватает для размещения до 256 ГБ информации. Производитель гордится тем, что Apple Mac mini работает «как большой», несмотря на свои миниатюрные размеры.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/d202b91bd55a1a89372ea173ce0eb49c/009a75a3b474bb897a06b38287f783608f212eab500b9d311de864276bf56ffb.jpg.webp",
                            ManufacturerId = 1,
                            Name = "Apple Mac mini",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1070), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Cost = 42799.0,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1072), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Мини ПК Acer Veriton N4710GT [DT.VXVCD.001] с малогабаритным корпусом-неттопом черного цвета рассчитан на выполнение офисных задач или эксплуатацию в качестве универсальной домашней станции. В сборке предусмотрены центральный процессор Intel Core i3-13100 оперативная память стандарта DDR4 общей емкостью 8 ГБ. Для операций с графическими данными используется встроенное графическое видеоядро ЦПУ Intel UHD Graphics 730. Для установки операционной системы и долговременного хранения данных компьютер компактного форм-фактора Acer Veriton N4710GT [DT.VXVCD.001] располагает одним накопителем SSD объемом 512 ГБ. Задачу снабжения всех потребителей системного блока электроэнергией решает блок питания с выходной мощностью 90 Вт. ПК поставляется без предустановленной рабочей платформы, чтобы вы смогли выбрать для него ОС самостоятельно.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/eaad089ab5a250ea0761e3e627b369ed/88536a35172397022dc8276542aeb7eb186f1f5fe8b5c588f1fbb5be14f71746.jpg.webp",
                            ManufacturerId = 5,
                            Name = "Acer Veriton N4710GT",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1073), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Cost = 64999.0,
                            Count = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1075), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Мини ПК MSI PRO DP 21 13M-631XRU в компактном корпусе размерами 208x54.8x204 мм предусматривает интерфейсы USB и jack 3.5 mm для подключения периферийных устройств, которые могут понадобиться в повседневной работе за компьютером. Модель совместима с VESA-крепежом, благодаря чему ее можно незаметно зафиксировать в любом удобном месте при помощи кронштейна. Устройство предусматривает COM-порт, который используется для подключения различного торгового оборудования, чековых принтеров и сканеров штрих-кодов. Мини ПК MSI PRO DP 21 13M-631XRU оснащен интерфейсом USB 3.2 Gen2 Type-C, благодаря которому при подключении к компьютеру внешних накопителей обеспечивается быстрый обмен файлами. Сборка функционирует на базе 10-ядерного процессора Intel Core i5-13400 и 16 ГБ оперативной памяти, которые обеспечивают стабильную работу при обработке данных электронной и мобильной коммерции.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st4/fit/wm/0/0/85a3fda8b8d165ec1cb7f31e788ff65d/1a4d09e2be16f43e25eb63cdb7895a154357e391f319c62a985d12cd49d96634.jpg.webp",
                            ManufacturerId = 4,
                            Name = "MSI PRO DP 21 13M-631XRU",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1075), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Cost = 80999.0,
                            Count = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1077), new TimeSpan(0, 5, 0, 0, 0)),
                            Description = "Мини ПК HP ProDesk 400 G9 R Mini имеет компактный корпус из черного пластика, который можно установить в вертикальном положении на специальной подставке. Он занимает мало места на рабочем столе. 16 ядер процессора Intel Core i7 производят вычисления в 24 потока, что обеспечивает моментальное выполнение разных задач без зависаний и торможений. Модуль оперативной памяти на 8 ГБ позволяет открывать множество программ или вкладок в браузере, легко переключаясь между ними. За хранение и быструю загрузку файлов отвечает SSD-накопитель на 512 ГБ. На корпусе мини ПК HP ProDesk 400 G9 R Mini имеются разъемы USB для подключения периферийных устройств и видеоразъемы для мониторов. Возможно беспроводное подключение устройств через Bluetooth. Встроенный сетевой адаптер обеспечивает стабильное интернет-соединение со скоростью 1 Гбит/с. Для этой же цели можно использовать модуль Wi-Fi. В комплекте с мини ПК предусмотрены проводные клавиатура и мышь.",
                            ImagePath = "https://c.dns-shop.ru/thumb/st1/fit/wm/0/0/ed5496ded049c64584bd19ad1fb3ec60/183003053da5384e9e20a70c42f2f24a301248f9ed2ab02c43f3403182d6adf5.jpg.webp",
                            ManufacturerId = 6,
                            Name = "HP ProDesk 400 G9 R Mini",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(1078), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("HashPassword")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8654), new TimeSpan(0, 5, 0, 0, 0)),
                            HashPassword = "A665A45920422F9D417E4867EFDC4FB8A04A1F3FFF1FA07E998E86F7F7A27AE3",
                            IsAdmin = true,
                            Name = "Admin1",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8663), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8668), new TimeSpan(0, 5, 0, 0, 0)),
                            HashPassword = "03AC674216F3E15C761EE1A5E255F067953623C8B388B4459E13F978D7C846F4",
                            IsAdmin = true,
                            Name = "Admin2",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8669), new TimeSpan(0, 5, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8670), new TimeSpan(0, 5, 0, 0, 0)),
                            HashPassword = "F6E0A1E2AC41945A9AA7FF8A8AAA0CEBC12A3BCC981A929AD5CF810A090E11AE",
                            IsAdmin = false,
                            Name = "Swifty",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 11, 15, 3, 33, 263, DateTimeKind.Unspecified).AddTicks(8671), new TimeSpan(0, 5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Neon.Domain.Entities.History", b =>
                {
                    b.HasOne("Neon.Domain.Entities.Product", "Product")
                        .WithMany("History")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neon.Domain.Entities.User", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Order", b =>
                {
                    b.HasOne("Neon.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Neon.Domain.Entities.OrderComposition", b =>
                {
                    b.HasOne("Neon.Domain.Entities.Order", "Order")
                        .WithMany("Compositions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neon.Domain.Entities.Product", "Product")
                        .WithMany("Compositions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Product", b =>
                {
                    b.HasOne("Neon.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Neon.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Order", b =>
                {
                    b.Navigation("Compositions");
                });

            modelBuilder.Entity("Neon.Domain.Entities.Product", b =>
                {
                    b.Navigation("Compositions");

                    b.Navigation("History");
                });

            modelBuilder.Entity("Neon.Domain.Entities.User", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
